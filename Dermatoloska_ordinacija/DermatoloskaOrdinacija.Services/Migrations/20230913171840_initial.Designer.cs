// <auto-generated />
using System;
using DermatoloskaOrdinacija.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DermatoloskaOrdinacija.Services.Migrations
{
    [DbContext(typeof(_200019Context))]
    [Migration("20230913171840_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Dojam", b =>
                {
                    b.Property<int>("DojamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DojamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DojamId"));

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.HasKey("DojamId")
                        .HasName("PK__Dojam__FDF96C501403C227");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Dojam_KorisnikID");

                    b.HasIndex(new[] { "ProizvodId" }, "IX_Dojam_ProizvodID");

                    b.ToTable("Dojam", (string)null);

                    b.HasData(
                        new
                        {
                            DojamId = 1,
                            IsLiked = true,
                            KorisnikId = 2,
                            ProizvodId = 1
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<string>("Adresa")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SpolId")
                        .HasColumnType("int")
                        .HasColumnName("SpolID");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TipKorisnikaId")
                        .HasColumnType("int")
                        .HasColumnName("TipKorisnikaID");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("KorisnikId")
                        .HasName("PK__Korisnik__80B06D61EA5C9458");

                    b.HasIndex(new[] { "SpolId" }, "IX_Korisnik_SpolID");

                    b.HasIndex(new[] { "TipKorisnikaId" }, "IX_Korisnik_TipKorisnikaID");

                    b.ToTable("Korisnik", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            Adresa = "test",
                            Email = "uposlenik@gmail.com",
                            Ime = "uposlenik",
                            LozinkaHash = "vCJEzMq01/y2WfxocUBTkBMJ0i0=",
                            LozinkaSalt = "cbRh4cvy1djCQHeiqTcggg==",
                            Prezime = "uposlenik",
                            SpolId = 1,
                            Telefon = "0612345678",
                            TipKorisnikaId = 2,
                            Username = "uposlenik"
                        },
                        new
                        {
                            KorisnikId = 2,
                            Adresa = "test",
                            Email = "pacijent@gmail.com",
                            Ime = "pacijent",
                            LozinkaHash = "ZEGY1lcTmU1LHPvmEagd/1aXq6o=",
                            LozinkaSalt = "5baNMRJ0C3G1HK5A7lybxQ==",
                            Prezime = "pacijent",
                            SpolId = 2,
                            Telefon = "0612345678",
                            TipKorisnikaId = 1,
                            Username = "pacijent"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Narudzba", b =>
                {
                    b.Property<int>("NarudzbaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaId"));

                    b.Property<string>("BrojNarudzbe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<double?>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("NarudzbaId")
                        .HasName("PK__Narudzba__FBEC13572CBE5E47");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Narudzba_KorisnikID");

                    b.ToTable("Narudzba", (string)null);

                    b.HasData(
                        new
                        {
                            NarudzbaId = 1,
                            BrojNarudzbe = "#1",
                            Datum = new DateTime(2023, 9, 13, 19, 18, 39, 831, DateTimeKind.Local).AddTicks(3968),
                            Iznos = 90.0,
                            KorisnikId = 2,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Novost", b =>
                {
                    b.Property<int>("NovostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NovostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NovostId"));

                    b.Property<DateTime?>("DatumObjave")
                        .HasColumnType("date");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Naslov")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NovostId")
                        .HasName("PK__Novost__967A351C2A39557C");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Novost_KorisnikID");

                    b.ToTable("Novost", (string)null);

                    b.HasData(
                        new
                        {
                            NovostId = 1,
                            DatumObjave = new DateTime(2023, 9, 13, 19, 18, 39, 831, DateTimeKind.Local).AddTicks(3891),
                            KorisnikId = 1,
                            Naslov = "Test naslov",
                            Sadrzaj = "Test sadrzaj"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.OmiljeniProizvodi", b =>
                {
                    b.Property<int>("OmiljeniProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OmiljeniProizvodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OmiljeniProizvodId"));

                    b.Property<DateTime?>("DatumDodavanja")
                        .HasColumnType("date");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.HasKey("OmiljeniProizvodId")
                        .HasName("PK__Omiljeni__C509DCAB45EDFCBF");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_OmiljeniProizvodi_KorisnikID");

                    b.HasIndex(new[] { "ProizvodId" }, "IX_OmiljeniProizvodi_ProizvodID");

                    b.ToTable("OmiljeniProizvodi", (string)null);

                    b.HasData(
                        new
                        {
                            OmiljeniProizvodId = 1,
                            DatumDodavanja = new DateTime(2023, 9, 13, 19, 18, 39, 831, DateTimeKind.Local).AddTicks(3930),
                            KorisnikId = 2,
                            ProizvodId = 1
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Proizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodId"));

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sifra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VrstaId")
                        .HasColumnType("int")
                        .HasColumnName("VrstaID");

                    b.HasKey("ProizvodId")
                        .HasName("PK__Proizvod__21A8BE18A0094A0D");

                    b.HasIndex(new[] { "VrstaId" }, "IX_Proizvod_VrstaID");

                    b.ToTable("Proizvod", (string)null);

                    b.HasData(
                        new
                        {
                            ProizvodId = 1,
                            Cijena = 50m,
                            Naziv = "Krema za akne",
                            Sifra = "555A",
                            StateMachine = "draft",
                            VrstaId = 1
                        },
                        new
                        {
                            ProizvodId = 2,
                            Cijena = 40m,
                            Naziv = "Losion za lice",
                            Sifra = "555B",
                            StateMachine = "draft",
                            VrstaId = 2
                        },
                        new
                        {
                            ProizvodId = 3,
                            Cijena = 40m,
                            Naziv = "Krema za lice",
                            Sifra = "555B",
                            StateMachine = "draft",
                            VrstaId = 1
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecenzijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzijaId"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecenzijaId")
                        .HasName("PK__Recenzij__D36C60909B0DCE80");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Recenzija_KorisnikID");

                    b.HasIndex(new[] { "ProizvodId" }, "IX_Recenzija_ProizvodID");

                    b.ToTable("Recenzija", (string)null);

                    b.HasData(
                        new
                        {
                            RecenzijaId = 1,
                            Datum = new DateTime(2023, 9, 13, 19, 18, 39, 831, DateTimeKind.Local).AddTicks(3640),
                            KorisnikId = 2,
                            ProizvodId = 1,
                            Sadrzaj = "Test recenzija"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.RecommendResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DrugiProizvodId")
                        .HasColumnType("int");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int");

                    b.Property<int?>("PrviProizvodId")
                        .HasColumnType("int");

                    b.Property<int?>("TreciProizvodId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Recommen__3214EC0798938C1E");

                    b.ToTable("RecommendResult", (string)null);
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Spol", b =>
                {
                    b.Property<int>("SpolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpolID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpolId"));

                    b.Property<string>("Naziv")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SpolId")
                        .HasName("PK__Spol__636459EFE65B4C91");

                    b.ToTable("Spol", (string)null);

                    b.HasData(
                        new
                        {
                            SpolId = 1,
                            Naziv = "M"
                        },
                        new
                        {
                            SpolId = 2,
                            Naziv = "F"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.StavkaNarudzbe", b =>
                {
                    b.Property<int>("StavkaNarudzbeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StavkaNarudzbeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StavkaNarudzbeId"));

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int?>("NarudzbaId")
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.HasKey("StavkaNarudzbeId")
                        .HasName("PK__StavkaNa__39E50D50F39346E7");

                    b.HasIndex(new[] { "NarudzbaId" }, "IX_StavkaNarudzbe_NarudzbaID");

                    b.HasIndex(new[] { "ProizvodId" }, "IX_StavkaNarudzbe_ProizvodID");

                    b.ToTable("StavkaNarudzbe", (string)null);

                    b.HasData(
                        new
                        {
                            StavkaNarudzbeId = 1,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 1
                        },
                        new
                        {
                            StavkaNarudzbeId = 2,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 2
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Termin", b =>
                {
                    b.Property<int>("TerminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TerminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerminId"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikIdDoktor")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID_doktor");

                    b.Property<int?>("KorisnikIdPacijent")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID_pacijent");

                    b.HasKey("TerminId")
                        .HasName("PK__Termin__42126CB55F98E1ED");

                    b.HasIndex(new[] { "KorisnikIdDoktor" }, "IX_Termin_KorisnikID_doktor");

                    b.HasIndex(new[] { "KorisnikIdPacijent" }, "IX_Termin_KorisnikID_pacijent");

                    b.ToTable("Termin", (string)null);

                    b.HasData(
                        new
                        {
                            TerminId = 1,
                            Datum = new DateTime(2023, 9, 13, 19, 18, 39, 831, DateTimeKind.Local).AddTicks(3850),
                            KorisnikIdDoktor = 1,
                            KorisnikIdPacijent = 2
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.TipKorisnika", b =>
                {
                    b.Property<int>("TipKorisnikaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipKorisnikaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipKorisnikaId"));

                    b.Property<string>("Tip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TipKorisnikaId")
                        .HasName("PK__TipKoris__6CE42F0EC901C725");

                    b.ToTable("TipKorisnika", (string)null);

                    b.HasData(
                        new
                        {
                            TipKorisnikaId = 1,
                            Tip = "Pacijent"
                        },
                        new
                        {
                            TipKorisnikaId = 2,
                            Tip = "Uposlenik"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Transakcija", b =>
                {
                    b.Property<int>("TranskcijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranskcijaId"));

                    b.Property<double?>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("NarudzbaId")
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    b.Property<string>("StatusTransakcije")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status_transakcije");

                    b.Property<string>("TransId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trans_id");

                    b.HasKey("TranskcijaId")
                        .HasName("PK__Transakc__7403ABDADAAB4592");

                    b.HasIndex("NarudzbaId");

                    b.ToTable("Transakcija", (string)null);

                    b.HasData(
                        new
                        {
                            TranskcijaId = 1,
                            Iznos = 90.0,
                            NarudzbaId = 1,
                            StatusTransakcije = "approved",
                            TransId = "PAYID-MT3WXSA82J975902T912173T"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.VrstaProizvodum", b =>
                {
                    b.Property<int>("VrstaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VrstaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaId"));

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VrstaId")
                        .HasName("PK__VrstaPro__42CB8F0F6304088C");

                    b.ToTable("VrstaProizvoda");

                    b.HasData(
                        new
                        {
                            VrstaId = 1,
                            Naziv = "Krema"
                        },
                        new
                        {
                            VrstaId = 2,
                            Naziv = "Losion"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.ZdravstveniKarton", b =>
                {
                    b.Property<int>("ZdravstveniKartonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZdravstveniKartonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZdravstveniKartonId"));

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZdravstveniKartonId")
                        .HasName("PK__Zdravstv__8A4E4706D0C1A0EA");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_ZdravstveniKarton_KorisnikID");

                    b.ToTable("ZdravstveniKarton", (string)null);

                    b.HasData(
                        new
                        {
                            ZdravstveniKartonId = 1,
                            KorisnikId = 2,
                            Sadrzaj = "Test sadrzaj"
                        });
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Dojam", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Dojams")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Dojam__KorisnikI__5EBF139D");

                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Dojams")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK__Dojam__ProizvodI__5DCAEF64");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Korisnik", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Spol", "Spol")
                        .WithMany("Korisniks")
                        .HasForeignKey("SpolId")
                        .HasConstraintName("FK__Korisnik__SpolID__44FF419A");

                    b.HasOne("DermatoloskaOrdinacija.Services.Database.TipKorisnika", "TipKorisnika")
                        .WithMany("Korisniks")
                        .HasForeignKey("TipKorisnikaId")
                        .HasConstraintName("FK__Korisnik__TipKor__440B1D61");

                    b.Navigation("Spol");

                    b.Navigation("TipKorisnika");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Narudzba", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Narudzbas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Narudzba__Korisn__571DF1D5");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Novost", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Novosts")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Novost__Korisnik__68487DD7");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.OmiljeniProizvodi", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "Korisnik")
                        .WithMany("OmiljeniProizvodis")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__OmiljeniP__Koris__4D94879B");

                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Proizvod", "Proizvod")
                        .WithMany("OmiljeniProizvodis")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK__OmiljeniP__Proiz__4CA06362");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Proizvod", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.VrstaProizvodum", "Vrsta")
                        .WithMany("Proizvods")
                        .HasForeignKey("VrstaId")
                        .HasConstraintName("FK__Proizvod__VrstaI__49C3F6B7");

                    b.Navigation("Vrsta");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Recenzija", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Recenzijas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Recenzija__Koris__628FA481");

                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Recenzijas")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK__Recenzija__Proiz__619B8048");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.StavkaNarudzbe", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Narudzba", "Narudzba")
                        .WithMany("StavkaNarudzbes")
                        .HasForeignKey("NarudzbaId")
                        .HasConstraintName("FK__StavkaNar__Narud__59FA5E80");

                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Proizvod", "Proizvod")
                        .WithMany("StavkaNarudzbes")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK__StavkaNar__Proiz__5AEE82B9");

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Termin", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "KorisnikIdDoktorNavigation")
                        .WithMany("TerminKorisnikIdDoktorNavigations")
                        .HasForeignKey("KorisnikIdDoktor")
                        .HasConstraintName("FK_korisnik_termin_doktor");

                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "KorisnikIdPacijentNavigation")
                        .WithMany("TerminKorisnikIdPacijentNavigations")
                        .HasForeignKey("KorisnikIdPacijent")
                        .HasConstraintName("FK_korisnik_termin_pacijent");

                    b.Navigation("KorisnikIdDoktorNavigation");

                    b.Navigation("KorisnikIdPacijentNavigation");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Transakcija", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Narudzba", "Narudzba")
                        .WithMany("Transakcijas")
                        .HasForeignKey("NarudzbaId")
                        .HasConstraintName("FK__Transakci__Narud__02FC7413");

                    b.Navigation("Narudzba");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.ZdravstveniKarton", b =>
                {
                    b.HasOne("DermatoloskaOrdinacija.Services.Database.Korisnik", "Korisnik")
                        .WithMany("ZdravstveniKartons")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Zdravstve__Koris__656C112C");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Korisnik", b =>
                {
                    b.Navigation("Dojams");

                    b.Navigation("Narudzbas");

                    b.Navigation("Novosts");

                    b.Navigation("OmiljeniProizvodis");

                    b.Navigation("Recenzijas");

                    b.Navigation("TerminKorisnikIdDoktorNavigations");

                    b.Navigation("TerminKorisnikIdPacijentNavigations");

                    b.Navigation("ZdravstveniKartons");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Narudzba", b =>
                {
                    b.Navigation("StavkaNarudzbes");

                    b.Navigation("Transakcijas");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Proizvod", b =>
                {
                    b.Navigation("Dojams");

                    b.Navigation("OmiljeniProizvodis");

                    b.Navigation("Recenzijas");

                    b.Navigation("StavkaNarudzbes");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.Spol", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.TipKorisnika", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("DermatoloskaOrdinacija.Services.Database.VrstaProizvodum", b =>
                {
                    b.Navigation("Proizvods");
                });
#pragma warning restore 612, 618
        }
    }
}
